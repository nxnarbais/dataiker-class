services:
  openmetrics-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DD_ENV=development
      - DD_SERVICE=openmetrics-app
      - DD_VERSION=1.0.0
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    labels:
      prometheus.io/scrape: 'true'
      prometheus.io/port: '3000'
      prometheus.io/path: '/metrics'
      com.datadoghq.ad.logs: '[{"source":"nodejs","service":"openmetrics-app"}]'
      # com.datadoghq.ad.check_names: '["openmetrics"]'
      # com.datadoghq.ad.init_configs: '[{}]'
      # com.datadoghq.ad.instances: '[{"openmetrics_endpoint":"http://%%host%%:3000/metrics","namespace":"openmetrics_app","metrics":[".*"]}]'
      # com.datadoghq.ad.instances: '[{"openmetrics_endpoint":"http://%%host%%:3000/metrics","namespace":"openmetrics_app","metrics":["http_requests.*","active_connections","custom_operations","memory_usage_bytes"]}]'
      # com.datadoghq.ad.instances: |
      #   [
      #     {
      #       "openmetrics_endpoint": "http://%%host%%:3000/metrics",
      #       "namespace": "openmetrics_app",
      #       "metrics": [
      #         "http_requests.*",
      #         "active_connections", 
      #         "custom_operations",
      #         "memory_usage_bytes"
      #       ]
      #     }
      #   ]
      com.datadoghq.ad.check_names: '["openmetrics","openmetrics","openmetrics"]'
      com.datadoghq.ad.init_configs: '[{},{},{}]'
      com.datadoghq.ad.instances: |
        [
          {
            "openmetrics_endpoint": "http://%%host%%:3000/metrics",
            "namespace": "openmetrics_app",
            "collect_histogram_buckets": true,
            "metrics": [
              "http_request.*",
              "active_connections", 
              "custom_operations",
              "memory_usage_bytes"
            ]
          },
          {
            "openmetrics_endpoint": "http://%%host%%:3000/metrics",
            "namespace": "openmetrics_app_nc",
            "collect_histogram_buckets": true,
            "non_cumulative_histogram_buckets": true,
            "metrics": [
              "http_request.*",
              "active_connections", 
              "custom_operations",
              "memory_usage_bytes"
            ]
          },
          {
            "openmetrics_endpoint": "http://%%host%%:3000/metrics",
            "namespace": "openmetrics_app_nc_dist",
            "collect_histogram_buckets": true,
            "non_cumulative_histogram_buckets": true,
            "histogram_buckets_as_distributions": true,
            "metrics": [
              "http_request.*",
              "active_connections", 
              "custom_operations",
              "memory_usage_bytes"
            ]
          }
        ]

  # Datadog Agent
  datadog-agent:
    container_name: dd-agent
    image: gcr.io/datadoghq/agent:latest
    environment:
      - DD_SITE=${DD_SITE:-datadoghq.com}
      - DD_API_KEY=${DD_API_KEY:-your-datadog-api-key}
      - DD_ENV=${DD_ENV:-dev}
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_PROCESSING_ENABLED=true
      - DD_COLLECT_KUBERNETES_EVENTS=false
      - DD_LEADER_ELECTION=false
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_CLUSTER_NAME=openmetrics-demo
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./datadog-agent.yaml:/etc/datadog-agent/datadog.yaml:ro
    ports:
      - "8126:8126"  # APM
      - "8125:8125/udp"  # DogStatsD
    restart: unless-stopped
    depends_on:
      - openmetrics-app
